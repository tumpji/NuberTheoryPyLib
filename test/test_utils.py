#!/usr/bin/env python3
import os     
import sys    # sys.version_info

import pickle

# for tests
import unittest 
import shutil
import timeit




is_py2 = sys.version_info < (3,0)

if is_py2 : 
    # quick fix for compability
    FileExistsError = OSError
    FileNotFoundError = IOError
else : pass 



class CacheFile:
    '''
    class create cache for 
        1) files from url
        2) generated by some function
    store location is in folder "test_cache"
    '''

    def __init__ (self, cache_dir='cache_folder'):
        self.cache_dir = cache_dir

        try :
            os.mkdir( self.cache_dir  )
        except FileExistsError:
            pass


    def load_url (self, url):
        try:
            return self._try_to_load_file_text ( self._map_url_to_filepath(url) )
        except FileNotFoundError:
            contents = self._load_url( url )
            self._try_to_store_file_text( self._map_url_to_filepath(url), contents )
            return contents

    def load_function ( self, filename,  function ):
        path = self._map_name_to_filepath(filename)
        try:
            dp = self._try_to_depickle_it ( path )
            return dp
        except FileNotFoundError:
            v = function()
            self._try_to_pickle_it ( path, v ) 
            return v

    def _map_url_to_filepath (self, url):
        return self.cache_dir + '/' + url.replace('/',' ')
    def _map_name_to_filepath (self, name):
        return self.cache_dir + '/' + name.replace('/',' ')


    @staticmethod
    def _load_url (url):
        encoding = 'UTF8'
        try: # python3
            import urllib.request
            return urllib.request.urlopen(url).read().decode(encoding)
        except ImportError: # try python2 way
            import urllib
            return urllib.urlopen(url).read().decode(encoding)


    @staticmethod
    def _try_to_load_file_text (filename): #throws FileNotFoundError
        with open(filename) as f:
            return f.read()

    @staticmethod
    def _try_to_store_file_text (filename, contents):
        with open(filename, 'w') as f:
            f.write( contents )

    @staticmethod
    def _try_to_pickle_it ( path, contents ):
        with open( path, 'wb' ) as f:
            pickle.dump( contents, f )

    @staticmethod
    def _try_to_depickle_it ( path ):
        with open( path, 'rb' ) as f:
            return pickle.load(f)

global_CacheFile = CacheFile()





def _horible_function ( ):
    a = [0] * 5000000
    for i in range(1,len(a)):
        a[i         ]   += i + a[i-1]
        a[len(a)-i-1]   -= i + 2*a[i-1]
    return a[len(a)//2]


class TestCacheFile (unittest.TestCase):
    def setUp (self):
        self.test_dir = 'test_dir'
        shutil.rmtree( self.test_dir, ignore_errors=True)
        self.obj = CacheFile(self.test_dir) 

    def tearDown (self):
        shutil.rmtree( self.obj.cache_dir , ignore_errors=True)

    def test_url (self):
        url = 'http://www.snort.com'
        s = """from test_utils import CacheFile; url = '{}'; v   =  CacheFile("{}"); """.format( url, self.test_dir )

        t1 = timeit.timeit('v.load_url(url)', number=1, setup=s  )
        t2 = timeit.timeit('v.load_url(url)', number=1, setup=s  )

        self.assertTrue( 5*t2 < t1 )

        v = self.obj.load_url(url)
        self.assertTrue( len(v.strip()) )

    def test_function (self):
        set_up_fce = '''import test_utils; v = test_utils.CacheFile('{}')'''.format(self.test_dir)
        function = """v.load_function("_test_horible_function",test_utils._horible_function)"""
        t1 = timeit.timeit(function, number=1, setup=set_up_fce)
        t2 = timeit.timeit(function, number=1, setup=set_up_fce)

        self.assertTrue( 5*t2 < t1 )
        self.assertEqual(-3124993750001, 
            self.obj.load_function('_test_horible_function', _horible_function ))


if __name__ == '__main__':
    unittest.main(verbosity=2)






